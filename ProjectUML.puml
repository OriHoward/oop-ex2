@startuml
'https://plantuml.com/class-diagram

interface DirectedWeightedGraph{
    + NodeData getNode(int key);
    + EdgeData getEdge(int src, int dest);
    + void addNode(NodeData n);
    + void connect(int src, int dest, double w);
    + Iterator<NodeData> nodeIter();
    + Iterator<EdgeData> edgeIter();
    + Iterator<EdgeData> edgeIter(int node_id);
    + NodeData removeNode(int key);
    + EdgeData removeEdge(int src, int dest);
    + int nodeSize();
    + int edgeSize();
    + int getMC();
}

interface DirectedWeightedGraphAlgorithms{

    + void init(DirectedWeightedGraph g)
    + DirectedWeightedGraph getGraph()
    + DirectedWeightedGraph copy()
    + boolean isConnected()
    + double shortestPathDist(int src, int dest)
    + List<NodeData> shortestPath(int src, int dest)
    + NodeData center()
    + boolean save(String file)
    + boolean load(String file)
}

class DirectedGraph implements DirectedWeightedGraph, Serializable {

    - int MCount
    - HashMap<Integer, NodeData> nodeMap
    - List<EdgeData> parsedEdges

    + void setParsedEdges(List<EdgeData> parsedEdges)
    + HashMap<Integer, NodeData> getNodeMap()
    + void hasChanged(int givenMCount)
    + boolean loadGraph(String filename)
    + void initiateEdgeMaps()

}

class DirectedGraphAlgorithms implements DirectedWeightedGraphAlgorithms {
    - DirectedGraph currGraph
    - Double[] dist
    - List<NodeData>[] prev
    - Comparator<NodeData> byWeightNew = (NodeData n1, NodeData n2)

    + Double[] getDist()
    + void dijkstra(int src)
    + void dijkstraMinimize(int src)
    + boolean isConnectedDFS()
    - void dfsTraversal(DirectedGraph graph, NodeData currNode, HashSet<Integer> scannedNodes)
    - int findMax()
    - void clearVisitedCities(List<NodeData> bestCircle, List<NodeData> cities)
    - List<NodeData> getOptimalPathFromLast(NodeData lastNode, List<NodeData> cities)
    - List<NodeData> getOptimalPathFromList(List<NodeData> cities)
    - List<NodeData> getOptimalPathFromMap(List<NodeData> cities, HashMap<List<NodeData>, Double> pathMap)
}

interface EdgeData{
    + int getSrc()
    + int getDest()
    + double getWeight()
    + String getInfo()
    + void setInfo(String s)
    + int getTag()
    + void setTag(int t)
}

class GraphEdge implements EdgeData, Serializable {
    - int source;
    - double weight;
    - int dest;
    + void setSource(int source)
    + void setDest(int dest)
    + GraphEdge(int source, int dest, double weight)
}

interface NodeData {
    + int getKey()
    + GeoLocation getLocation()
    + void setLocation(GeoLocation p)
    + double getWeight()
    + void setWeight(double w)
    + String getInfo()
    + void setInfo(String s)
    + int getTag()
    + void setTag(int t)
}

class GraphNode implements NodeData, Serializable {

    - GeoLocation pos
    - int id
    - double weight
    - HashMap<Integer, EdgeData> destMap
    - HashMap<Integer, EdgeData> sourceMap
    - NodeTagEnum tag

    + HashMap<Integer, EdgeData> getDestMap()
    + HashMap<Integer, EdgeData> getSourceMap()
    + void addDest(EdgeData edge)
    + void setSourceMap(HashMap<Integer, EdgeData> sourceMap)
    + void setDestMap(HashMap<Integer, EdgeData> destMap)
    + void addSrc(EdgeData edge)
    + EdgeData removeDest(int dest)
    + EdgeData removeSrc(int source)

}

interface GeoLocation {

    + double x()
    + double y()
    + double z()
    + double distance(GeoLocation g)
}

class NodeLocation implements GeoLocation, Serializable {

    - double x
    - double y
    - double z

}

class PosSerializer implements JsonSerializer {
    + JsonElement serialize(NodeData nodeData, Type type, JsonSerializationContext jsonSerializationContext)
}

enum NodeTagEnum {
    WHITE
    GRAY
    BLACK
    - final int value
    - NodeTagEnum(int value)
    + int getValue()
}

class DecoratedGraphIterator implements Iterator{
    - DirectedGraph graph
    - int currIndex
    - int MCount
    - Iterator<T> graphIter

    + boolean hasNext()
    + T next()
    + void remove()
    + void forEachRemaining(Consumer<? super T> action)
}


@enduml