@startuml
'https://plantuml.com/class-diagram

interface DirectedWeightedGraph{
    + NodeData getNode(int key);
    + EdgeData getEdge(int src, int dest);
    + void addNode(NodeData n);
    + void connect(int src, int dest, double w);
    + Iterator<NodeData> nodeIter();
    + Iterator<EdgeData> edgeIter();
    + Iterator<EdgeData> edgeIter(int node_id);
    + NodeData removeNode(int key);
    + EdgeData removeEdge(int src, int dest);
    + int nodeSize();
    + int edgeSize();
    + int getMC();
}

interface DirectedWeightedGraphAlgorithms{

    + void init(DirectedWeightedGraph g)
    + DirectedWeightedGraph getGraph()
    + DirectedWeightedGraph copy()
    + boolean isConnected()
    + double shortestPathDist(int src, int dest)
    + List<NodeData> shortestPath(int src, int dest)
    + NodeData center()
    + boolean save(String file)
    + boolean load(String file)
}

class DirectedGraph implements DirectedWeightedGraph, Serializable {

    - int MCount
    - HashMap<Integer, NodeData> nodeMap
    - List<EdgeData> parsedEdges

    + void setParsedEdges(List<EdgeData> parsedEdges)
    + HashMap<Integer, NodeData> getNodeMap()
    + void hasChanged(int givenMCount)
    + boolean loadGraph(String filename)
    + void initiateEdgeMaps()

}

class DirectedGraphAlgorithms implements DirectedWeightedGraphAlgorithms {
    - DirectedGraph currGraph
    - HashMap<Integer, Double> dist
    - HashMap<Integer, List<NodeData>> prev
    - Comparator<NodeData> byWeightNew = (NodeData n1, NodeData n2)

    + Double[] getDist()
    + void dijkstra(int src)
    + void dijkstraMinimize(int src)
    + boolean isConnectedDFS()
    - void dfsTraversal(DirectedGraph graph, NodeData currNode, HashSet<Integer> scannedNodes)
    - int findMax()
    - void clearVisitedCities(List<NodeData> bestCircle, List<NodeData> cities)
    - List<NodeData> getOptimalPathFromLast(NodeData lastNode, List<NodeData> cities)
    - List<NodeData> getOptimalPathFromList(List<NodeData> cities)
    - List<NodeData> getOptimalPathFromMap(List<NodeData> cities, HashMap<List<NodeData>, Double> pathMap)
}

interface EdgeData{
    + int getSrc()
    + int getDest()
    + double getWeight()
    + String getInfo()
    + void setInfo(String s)
    + int getTag()
    + void setTag(int t)
}

class GraphEdge implements EdgeData, Serializable {
    - int source;
    - double weight;
    - int dest;
    + void setSource(int source)
    + void setDest(int dest)
    + GraphEdge(int source, int dest, double weight)
}

interface NodeData {
    + int getKey()
    + GeoLocation getLocation()
    + void setLocation(GeoLocation p)
    + double getWeight()
    + void setWeight(double w)
    + String getInfo()
    + void setInfo(String s)
    + int getTag()
    + void setTag(int t)
}

class GraphNode implements NodeData, Serializable {

    - GeoLocation pos
    - int id
    - double weight
    - HashMap<Integer, EdgeData> destMap
    - HashMap<Integer, EdgeData> sourceMap
    - NodeTagEnum tag

    + HashMap<Integer, EdgeData> getDestMap()
    + HashMap<Integer, EdgeData> getSourceMap()
    + void addDest(EdgeData edge)
    + void setSourceMap(HashMap<Integer, EdgeData> sourceMap)
    + void setDestMap(HashMap<Integer, EdgeData> destMap)
    + void addSrc(EdgeData edge)
    + EdgeData removeDest(int dest)
    + EdgeData removeSrc(int source)

}

interface GeoLocation {

    + double x()
    + double y()
    + double z()
    + double distance(GeoLocation g)
}

class NodeLocation implements GeoLocation, Serializable {

    - double x
    - double y
    - double z

}

class PosSerializer implements JsonSerializer {
    + JsonElement serialize(NodeData nodeData, Type type, JsonSerializationContext jsonSerializationContext)
}

enum NodeTagEnum {
    WHITE
    GRAY
    BLACK
    - final int value
    - NodeTagEnum(int value)
    + int getValue()
}

class DecoratedGraphIterator implements Iterator{
    - DirectedGraph graph
    - int currIndex
    - int MCount
    - Iterator<T> graphIter

    + boolean hasNext()
    + T next()
    + void remove()
    + void forEachRemaining(Consumer<? super T> action)
}

class GraphGui implements Application {
    final int WIDTH
    fina int HEIGHT
    static DirectedGraphAlgorithms algos
    HashMap<Integer, Button> nodeMap
    Pane root
    Double radius
    DirectedWeightedGraph originalGraphCopy

    + void start(Stage primaryStage)
    - void connectAction(Stage primaryStage, MenuItem connect)
    - void removeEdgeAction(Stage primaryStage, MenuItem removeEdge)
    - void popWindow(Stage stage, Label label, TextField textFieldId, Button removeButton)
    - void removeNodeAction(Stage primaryStage, MenuItem removeNode)
    - void removedNodeErrorMessage()
    - void removedNodeErrorMessage()
    - shortestPathDistAction(MenuItem shortestPathDist)
    - void shortestPathAction(MenuItem shortestPath)
    - void addNodeAction(Stage primaryStage, MenuItem addNode)
    - void updateGraph(Stage primaryStage)
    - void saveAction(Stage primaryStage, FileChooser fileChooser, FileChooser saveFileChooser, MenuItem save)
    - void resetAction(Stage primaryStage, Button reset)
    - void cleanAction(Button clean)
    - void loadAction(Stage primaryStage, FileChooser fileChooser, MenuItem load)
    - void tspAction(MenuItem tsp)
    - Point2D findMinPoint()
    - Point2D findMaxPoint()
    - void errorPopUp()
    - boolean isDouble(String valueX, String valueY)
    - boolean isDouble(String num)
    - void paintTrail(List<NodeData> result)
    - void shortestPath(int maxNum, TextField sourceInput, TextField destInput)
    - void shortestPathDist(int maxNum, TextField sourceInput, TextField destInput)
    - Boolean isInt(TextField sourceInput, TextField destInput)
    - Boolean isInt(TextField userInput)
    - void savePopWindow(Boolean isSaved)
    - void isConnectedPopWindow(Boolean isConnected)
    + static void main(String[] args, DirectedGraphAlgorithms graphAlgo)
}

class MyTimer implements AnimationTimer {
    - double radius;
    - DirectedGraphAlgorithms algos;
    - Pane root;
    HashMap<Integer,Button> nodeList;
    - int width;
    - private int height

    + MyTimer(DirectedGraphAlgorithms algos, Pane root,double radius,HashMap<Integer,Button> nodeList,int width,int height)
    + void handle(long l)
    - void connectNodes()
    - double endAngleInBetween(double p1X, double p1Y, double p2X, double p2Y)
    - double startAngleInBetween(double p1X, double p1Y, double p2X, double p2Y)
    - Point2D correctPoint(double x, double y, double angle)
    - void drawArrow(double strPx, double strPy, double endPx, double endPy)
    - double calculateDist(double strPx, double strPy, double endPx, double endPy)
    - void drawNodes();
}

class GraphScale {
    DirectedGraphAlgorithms algos;
    Point2D minPoint;
    Point2D maxPoint;
    int width;
    int height;

    + GraphScale(DirectedGraphAlgorithms graph, int width, int height)
    + void setRange()
    + Point2D convert(Point2D point)
}

@enduml